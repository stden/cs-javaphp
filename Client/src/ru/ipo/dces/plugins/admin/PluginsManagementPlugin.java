package ru.ipo.dces.plugins.admin;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import ru.ipo.dces.client.Controller;
import ru.ipo.dces.exceptions.GeneralRequestFailureException;
import ru.ipo.dces.exceptions.ServerReturnedError;
import ru.ipo.dces.pluginapi.Plugin;
import ru.ipo.dces.pluginapi.PluginEnvironment;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

/**
 * Created by IntelliJ IDEA.
 * User: Илья
 * Date: 23.12.2008
 * Time: 2:07:39
 */
public class PluginsManagementPlugin implements Plugin {
  private JPanel drawPanel;
  private JTextField aliasTextField;
  private JTextPane descriptionTextPane;
  private JButton clearButton;
  private JButton modifyButton;
  private JTextField fileTextField;
  private JButton findFileButton;
  private JButton removeButton;
  private static final String NOT_SELECTED = "(файл не выбран)";

  public PluginsManagementPlugin(PluginEnvironment env) {

    env.setTitle("Плагины");

    fileTextField.setText(NOT_SELECTED);

    clearButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        aliasTextField.setText("");
        descriptionTextPane.setText("");
        fileTextField.setText(NOT_SELECTED);
      }
    });
    modifyButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        try {
          final String alias = aliasTextField.getText();
          if (alias.equals("")) {
            JOptionPane.showMessageDialog(null, "Введите название плагина для изменения");
            return;
          } else if (JOptionPane.showConfirmDialog(null, "Подтвердите изменение плагина", "Изменение", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION)
            return;

          final String fileText = fileTextField.getText();
          final File file;
          if (fileText.equals(NOT_SELECTED))
            file = null;
          else
            file = new File(fileText);
          Controller.adjustClientPlugin(alias, descriptionTextPane.getText(), file);

          JOptionPane.showMessageDialog(null, "Плагин успешно изменен");
        } catch (ServerReturnedError ee) {
          JOptionPane.showMessageDialog(null, "Сервер сообщает об ошибке: " + ee.getMessage());
        } catch (GeneralRequestFailureException ee) {
          JOptionPane.showMessageDialog(null, "Не удалось изменить плагин стороны клиента");
        }
      }
    });
    removeButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        try {
          final String alias = aliasTextField.getText();
          if (alias.equals("")) {
            JOptionPane.showMessageDialog(null, "Введите название плагина для удаления");
            return;
          } else if (JOptionPane.showConfirmDialog(null, "Подтвердите удаление плагина", "Удаление", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION)
            return;

          Controller.removeClientPlugin(alias);

          JOptionPane.showMessageDialog(null, "Плагин успешно удален");
        } catch (ServerReturnedError ee) {
          JOptionPane.showMessageDialog(null, "Сервер сообщает об ошибке: " + ee.getMessage());
        } catch (GeneralRequestFailureException ee) {
          JOptionPane.showMessageDialog(null, "Не удалось удалить плагин стороны клиента");
        }
      }
    });
    findFileButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        JFileChooser dialog = new JFileChooser();
        if (dialog.showOpenDialog(null) != JFileChooser.APPROVE_OPTION)
          fileTextField.setText(NOT_SELECTED);
        else
          fileTextField.setText(dialog.getSelectedFile().getPath());
      }
    });
  }

  public JPanel getPanel() {
    return drawPanel;
  }

  public void activate() {
    //do nothing
  }

  public void deactivate() {
    //do nothing
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    drawPanel = new JPanel();
    drawPanel.setLayout(new FormLayout("fill:4dlu:grow,left:4dlu:noGrow,fill:40dlu:noGrow,left:4dlu:noGrow,fill:40dlu:noGrow,left:4dlu:noGrow,fill:60dlu:noGrow,left:4dlu:noGrow,fill:36dlu:noGrow,left:4dlu:noGrow,fill:20dlu:noGrow,left:4dlu:noGrow,fill:4dlu:grow", "center:4dlu:noGrow,top:4dlu:noGrow,center:16dlu:noGrow,top:4dlu:noGrow,center:60dlu:noGrow,top:4dlu:noGrow,center:16dlu:noGrow,top:5dlu:noGrow,center:20dlu:noGrow,top:4dlu:noGrow,center:20dlu:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
    final JLabel label1 = new JLabel();
    label1.setText("Название");
    CellConstraints cc = new CellConstraints();
    drawPanel.add(label1, cc.xy(3, 3));
    aliasTextField = new JTextField();
    drawPanel.add(aliasTextField, cc.xyw(5, 3, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
    final JLabel label2 = new JLabel();
    label2.setText("Описание");
    drawPanel.add(label2, cc.xy(3, 5, CellConstraints.DEFAULT, CellConstraints.TOP));
    final JScrollPane scrollPane1 = new JScrollPane();
    drawPanel.add(scrollPane1, cc.xyw(5, 5, 7, CellConstraints.FILL, CellConstraints.FILL));
    descriptionTextPane = new JTextPane();
    scrollPane1.setViewportView(descriptionTextPane);
    final JLabel label3 = new JLabel();
    label3.setText("Файл");
    drawPanel.add(label3, cc.xy(3, 7));
    fileTextField = new JTextField();
    fileTextField.setEditable(false);
    drawPanel.add(fileTextField, cc.xyw(5, 7, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
    findFileButton = new JButton();
    findFileButton.setText("...");
    drawPanel.add(findFileButton, cc.xy(11, 7));
    modifyButton = new JButton();
    modifyButton.setText("Исправить");
    drawPanel.add(modifyButton, cc.xyw(9, 9, 3));
    clearButton = new JButton();
    clearButton.setText("Очистить");
    drawPanel.add(clearButton, cc.xy(7, 9));
    removeButton = new JButton();
    removeButton.setText("Удалить");
    drawPanel.add(removeButton, cc.xyw(9, 11, 3));
    label1.setLabelFor(aliasTextField);
    label2.setLabelFor(descriptionTextPane);
    label3.setLabelFor(fileTextField);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return drawPanel;
  }
}
