//TODO сделать возможность настраивать ResultAccessPolicy для контеста. Пока что это policy - выдавать результаты всегда

1. jar
2. exceptions
3. results framework
4. documentation
5. testing

1. [ACM] Каждый видит Результат всех Участников и свое Решение - до последних N минут, в последние N минут он видит "замороженные" (за N минут) Результаты. После окончания Контеста он видит M минут те же "замороженные" Результаты, а потом, наблюдает актуальные (вычисленные в момент окончания контеста) Результаты.

2. [Default] Я могу видеть во время контеста только свое Решение, через M минут после окончания Контеста вижу еще и Результаты Участников, в т.ч. и свой.

3. [PrivateContest] Я могу видеть только свое Решение, от меня зависит, когда я вижу Результат.

Упрощения ResultsAccessPolicy:

1. Администратору не нужно настраивать RAP, он и так получает AccessiblePart совпадающий с ContestResult
2. Пользователю нужно только настраивать время, в течение которого он видит Results, MyResults. MySolution он видит всегда, OtherSolutions не видит никогда.

//TODO relate ContestStatus to Participants, ParticipantSolutions, ResultsAccessPolicy, etc.

1. [Default]
Участник посылает строку символов в качестве результата. Результат проверки - это "Да/Нет". 

Посылать решения можно:
  1) не более чем k раз
  2) сколько угодно

Засчитывать решения можно:
  1) только последнюю отсылку
  2) если есть хотя бы одно правильное решение

Узнать результат решения можно:
  1) сразу же
  2) по окончании

Решение проверяется:
  1) сразу же
  2) по окончании

Результаты других участников доступны:
  1)Доступны все время (по запросу)
  2)Доступны только по окончании
  3)Недоступны

2. [CEO]
Участник отсылает "абстрактные данные" %). Результат проверки - "абстрактные данные".

Посылать решения можно:
  б) сколько угодно

Засчитывать решения можно:
  1) только последнюю отсылку
  

Узнать результат решения можно:
  2) по окончании

Решение проверяется: - заранее неизвестно, может быть и так и так
  1) сразу же ?
  2) по окончании ?

Результаты других участников доступны:
  2)Доступны только по окончании



3. [ACM]

3.1 [ACM - Classics]
Участник отсылает код программы (длинные текстовые данные) + окружение программы (язык и компилятор). Результат проверки - нетривиальный (ACCEPTED/ERROR (WRONG_ANSWER, TIME_LIMIT, ETC.) + TEST_NO (where failed)).

a) Посылать решения можно:
  2) сколько угодно

Засчитывать решения можно:
  2) если есть хотя бы одно правильное решение

Узнать результат решения можно:
  1) сразу же

Решение проверяется:
  1) сразу же

Результаты других участников доступны: //более сложная бизнес-логика ("Замораживание" за час до конца, и т.д.)
  1)Доступны все время (по запросу)
  2)Доступны только по окончании
  



3.2 [ACM - School]
Участник отсылает код программы (длинные текстовые данные) + окружение программы (язык и компилятор). Результат проверки - нетривиальный (АCCEPTED/ERROR (WRONG_ANSWER, TIME_LIMIT, ETC.) + TEST_NO (where failed)).


//NOTE: Различается только подсчетом баллов

Посылать решения можно:
  2) сколько угодно

Засчитывать решения можно:
  2) если есть хотя бы одно правильное решение

Узнать результат решения можно:
  1) сразу же

Решение проверяется:
  1) сразу же

Результаты других участников доступны: //более сложная бизнес-логика ("Замораживание" за час до конца, и т.д.)
  1)Доступны все время (по запросу)
  2)Доступны только по окончании



3.2 [ACM - Training]
Участник отсылает код программы (длинные текстовые данные) + окружение программы (язык и компилятор). Результат проверки - правильно/неправильно

Посылать решения можно:
  2) сколько угодно

Засчитывать решения можно:
  1) только последнюю отсылку

Узнать результат решения можно:
  2) по окончании

Решение проверяется:
  2) по окончании

Результаты других участников доступны:
  2)Доступны только по окончании



4 [PrivateContest]

4.1 Личное тестирование

Участник отсылает текстовые данные. Результат проверки - "абстрактные данные"

Посылать решения можно:
  1) не более чем 1 раз
  2) сколько угодно

Засчитывать решения можно:
 1) только последнюю отсылку
 
Узнать результат решения можно:
  2) по окончании контеста (можно закончить когда угодно)

Решение проверяется: 
  1) сразу же
  2) по окончании

Результаты других участников доступны:
  3)Недоступны



4.2 Групповое тестирование
Участник отсылает текстовые данные. Результат проверки - "абстрактные данные"

Посылать решения можно:
  1) не более чем 1 раз
  2) сколько угодно

Засчитывать решения можно:
 1) только последнюю отсылку

Узнать результат решения можно:
  2) по окончании контеста (можно закончить когда угодно)

Решение проверяется:
  1) сразу же
  2) по окончании

Результаты других участников доступны:
  2)Доступны только по окончании
  3)Недоступны

---------------------------------------------------------------------------------------------
DCES Система для проведения соревнований
 - создание и управление соревнованиями
 - управление участниками
 - интерфейс общения задачи на клиенте и проверятеля на сервере
 - управление доступом к результатам соревнований
 - управление временем, когда можно отсылать решения
 * общение участника и жюри


//храним таблицу как, три поля в БД
task_id -> task_name
task_id -> String[] //названия столбцов конкретной задачи
user_id -> task_id -> String[]

Столбцы
'basic' -> user_id | login //только admin
'data' -> столбцы данных //admin - все, user - только те, что можно
task_id -> столбцы от задачи

Названия столбцов заполняются
'basic' -> сам столбец сразу, подстолбцы сразу
'data' -> сам столбец сразу, подстолбцы

в таблице результатов дублируются данные!!
можно хранить в таблице участников результат этого участника по всем задачам вида
serialize(array(task_id -> result)). Ну и вот, дублирования нету.

//типы контестов