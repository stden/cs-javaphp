package ru.ipo.dces.plugins;

import ru.ipo.dces.pluginapi.Plugin;
import ru.ipo.dces.pluginapi.PluginEnvironment;

import javax.swing.*;

import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.CellConstraints;

public class ManageServerPlugin extends Plugin {
    private JTextField contestNameField;
    private JFormattedTextField beginDateField;
    private JFormattedTextField beginTimeField;
    private JFormattedTextField endDateField;
    private JFormattedTextField endTimeField;
    private JTextArea contestDescriptionField;
    private JRadioButton administratorRegistrationRB;
    private JRadioButton ownRegistrationRB;
    private JList contestantsList;
    private JTextField contestantNameField;
    private JButton addButton;
    private JButton deleteButton;
    private JPanel drawPanel;

    private static final long serialVersionUID = -4584214565491150823L;

    /**
     * Инициализация plugin'а
     */
    public ManageServerPlugin(PluginEnvironment env) {
        super(env);

        /*beginDateField = new JFormattedTextField(new Date());
        beginTimeField = new JFormattedTextField(new Date());
        endDateField = new JFormattedTextField(new Date());
        endTimeField = new JFormattedTextField(new Date());*/
    }

    public void setData(ManageServerPluginBean data) {
        contestNameField.setText(data.getContestNameField());
        beginDateField.setText(data.getBeginDateField());
        beginTimeField.setText(data.getBeginTimeField());
        endDateField.setText(data.getEndDateField());
        endTimeField.setText(data.getEndTimeField());
        contestDescriptionField.setText(data.getContestDescriptionField());
        contestantNameField.setText(data.getContestantNameField());
    }

    public void getData(ManageServerPluginBean data) {
        data.setContestNameField(contestNameField.getText());
        data.setBeginDateField(beginDateField.getText());
        data.setBeginTimeField(beginTimeField.getText());
        data.setEndDateField(endDateField.getText());
        data.setEndTimeField(endTimeField.getText());
        data.setContestDescriptionField(contestDescriptionField.getText());
        data.setContestantNameField(contestantNameField.getText());
    }

    public boolean isModified(ManageServerPluginBean data) {
        if (contestNameField.getText() != null ? !contestNameField.getText().equals(data.getContestNameField()) : data.getContestNameField() != null)
            return true;
        if (beginDateField.getText() != null ? !beginDateField.getText().equals(data.getBeginDateField()) : data.getBeginDateField() != null)
            return true;
        if (beginTimeField.getText() != null ? !beginTimeField.getText().equals(data.getBeginTimeField()) : data.getBeginTimeField() != null)
            return true;
        if (endDateField.getText() != null ? !endDateField.getText().equals(data.getEndDateField()) : data.getEndDateField() != null)
            return true;
        if (endTimeField.getText() != null ? !endTimeField.getText().equals(data.getEndTimeField()) : data.getEndTimeField() != null)
            return true;
        if (contestDescriptionField.getText() != null ? !contestDescriptionField.getText().equals(data.getContestDescriptionField()) : data.getContestDescriptionField() != null)
            return true;
        if (contestantNameField.getText() != null ? !contestantNameField.getText().equals(data.getContestantNameField()) : data.getContestantNameField() != null)
            return true;
        return false;
    }

    private void createUIComponents() {
        drawPanel = this;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        drawPanel.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:138px:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:95px:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow"));
        contestNameField = new JTextField();
        CellConstraints cc = new CellConstraints();
        drawPanel.add(contestNameField, cc.xyw(3, 1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label1 = new JLabel();
        label1.setText("Введите название контеста");
        drawPanel.add(label1, cc.xy(1, 1));
        final JLabel label2 = new JLabel();
        label2.setText("Введите дату и время начала");
        drawPanel.add(label2, cc.xy(1, 3));
        beginDateField = new JFormattedTextField();
        drawPanel.add(beginDateField, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        beginTimeField = new JFormattedTextField();
        drawPanel.add(beginTimeField, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label3 = new JLabel();
        label3.setText("Введите дату и время окончания");
        drawPanel.add(label3, cc.xy(1, 5));
        endDateField = new JFormattedTextField();
        drawPanel.add(endDateField, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label4 = new JLabel();
        label4.setText("Введите описание контеста");
        drawPanel.add(label4, cc.xy(1, 7));
        contestDescriptionField = new JTextArea();
        contestDescriptionField.setLineWrap(true);
        contestDescriptionField.setText("");
        contestDescriptionField.setWrapStyleWord(true);
        drawPanel.add(contestDescriptionField, cc.xyw(3, 7, 3, CellConstraints.FILL, CellConstraints.FILL));
        final JLabel label5 = new JLabel();
        label5.setText("Тип регистрации");
        drawPanel.add(label5, cc.xy(1, 9));
        ownRegistrationRB = new JRadioButton();
        ownRegistrationRB.setText("Самостоятельно");
        drawPanel.add(ownRegistrationRB, cc.xy(3, 9));
        final JLabel label6 = new JLabel();
        label6.setText("Список участников");
        drawPanel.add(label6, cc.xy(1, 11));
        contestantsList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("Миша");
        defaultListModel1.addElement("Маша");
        defaultListModel1.addElement("Петя");
        defaultListModel1.addElement("Анжела");
        contestantsList.setModel(defaultListModel1);
        contestantsList.setSelectionMode(0);
        drawPanel.add(contestantsList, cc.xywh(3, 11, 1, 5, CellConstraints.DEFAULT, CellConstraints.FILL));
        endTimeField = new JFormattedTextField();
        drawPanel.add(endTimeField, cc.xy(5, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        administratorRegistrationRB = new JRadioButton();
        administratorRegistrationRB.setSelected(true);
        administratorRegistrationRB.setText("Администратором");
        drawPanel.add(administratorRegistrationRB, cc.xy(5, 9));
        contestantNameField = new JTextField();
        drawPanel.add(contestantNameField, cc.xy(5, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
        addButton = new JButton();
        addButton.setText("Добавить");
        drawPanel.add(addButton, cc.xy(5, 13));
        deleteButton = new JButton();
        deleteButton.setText("Удалить");
        drawPanel.add(deleteButton, cc.xy(5, 15));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return drawPanel;
    }
}
