#summary Реализация плагина стороны сервера
#labels Phase-Implementation

= Реализация плагина стороны сервера =

Для реализации плагина необходимо создать php файл, который называется как Alias плагина,
и который содержит внутри себя класс с тем же именем. Класс должен наследовать `ServerPlugin`.

{{{
class ServerPlugin {

  //Подключение к базе данных, заполняется автоматически при создании класса.
  protected $con;

  //Каталог с данными о задаче, заполняется автоматически при создании класса. Здесь
  //можно хранить произвольные данные, необходимые для создания условия или проверки
  //ответа к задаче. За содержимое этого каталога полностью ответственен плагин.
  protected $folder;

  //Конструктор переопределять необязательно. Но если он переопределен,
  //первой действием должен быть вызов конструктора базового класса.
  public function __construct($con, $folder);

  //Метод обязательно надо переопределить. На вход он получает
  //solution - решение задачи, тип array(string=>string)
  //user_id - id пользователя, пославшего решения. Необходимо только если
  //          условия задач у участников различаются.
  //answer_data - произвольные данные, которые были сериализованы плагином
  //              в Базу Данных в момент загрузки условия задачи в методе
  //              updateAnswerData(). Содержит либо сразу ответ, либо данные
  //              для его построения
  //previous_result - результат предудущей посылки решения или null, если
  //                  метод вызывается впервые. Другим словами сюда подставляется то,
  //                  что было возвращено функцией при предыдущем вызове
  //Функция возвращает результат проверки, это обязательно должны быть данные
  //типа array(string=>string), иначе их не примет плагин стороны клиента.
  public function checkSolution($solution, $user_id, $answer_data, $previous_result);

  //Возвращает условие задачи. Набор байтов, соответствующий zip архиву с содержимым
  //каталога для плагина клиента. Метод можно не переопределять, тогда возвращается
  //то же, что было послано серверу как "данные для условия задачи".
  //user_id - пользователь, который просит условие
  //statement_data - произвольные данные, котороые плагин сохранил при вызове метода
  //                 updateStatementData()
  public function getStatement($user_id, $statement_data);

  //Метод можно переопределить. На вход подается Zip с данными для условия задачи.
  //Его надо обработать и то что вернет функцию будет записано в Базу Данных как
  //statement_data к задаче. Потом этот statement_data передается в getStatement()
  public function updateStatementData($statement_zip);

  //Метод можно (чаще всего надо) переопределить. На вход подается Zip с данными
  //для ответа к задаче. Его надо обработать и то что вернет функцию будет записано
  //в Базу Данных как statement_data к задаче. Потом этот answer_data передается
  //в checkSolution()
  public function updateAnswerData($answer_zip);  

  //Методы возвращают данные для условия и ответа к задаче, которые были посланы
  //при настройке контеста. Методы лучше всего не переопределять, они и так
  //делают то, что требуется.
  public function getStatementData($problem_id);
  public function getAnswerData($problem_id);

  }
}}}